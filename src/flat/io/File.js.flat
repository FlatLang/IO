package flat/io

import flat/time/Time
import flat/eventstream/EventStream

import static flat/node/import/Import

class File {
    visible static File EXECUTED_FILE = getExecutedFile()
    visible static File EXECUTED_DIRECTORY = getExecutedDirectory()

    visible Bool isDirectory {
        get {
            if (!exists) {
                return false
            }

            external {
                if (#{FileGlobal.fs}.lstatSync(#{location.chars.data}).isDirectory()) {
                    return true;
                }
            }

            return false
        }
    }

    visible Bool isSymbolicLink {
        get {
            if (!exists) {
                return false
            }

            external {
                if (#{FileGlobal.fs}.lstatSync(#{location.chars.data}).isSymbolicLink()) {
                    return true;
                }
            }

            return false
        }
    }

    visible Bool exists {
        get {
            external {
                if (#{FileGlobal.fs}.existsSync(#{location.chars.data})) {
                    return true;
                }
            }

            return false
        }
    }

    visible File[] files {
        get {
            if (!isDirectory) {
                throw Exception("\"#{location}\" must be a directory to list files")
            }

            var list = File[]
            native_array native Char[] filename

            external {
                #{FileGlobal.fs}.readdirSync(#{location.chars.data}).forEach((f) => {
                    #{filename} = f;
                    #{list.add(File("#{location}/#{String(filename)}"))};
                });
            }

            return list
        }
    }

    visible Long bytes {
        get {
            external {
                return #{FileGlobal.fs}.statSync(#{location.chars.data}).size;
            }
        }
    }

    public toFileSize() => Long.toFileSize(bytes)

    public construct(File parent, String path) {
        this(parent.normalizedLocation + "/" + path.trimStart('/'))
    }

    public construct(visible String location) {
        normalizedLocation = normalizeLocation(location)
    }

    static getExecutedFile() -> File => null {
        native_array native var Char[] data

        external {
            if (typeof __filename !== 'undefined') {
                #{data} = __filename;
            } else {
                #{data} = "";
            }
        }

        return File(String(data))
    }

    static getExecutedDirectory() -> File => null {
        native_array native var Char[] data

        external {
            if (typeof __dirname !== 'undefined') {
                #{data} = __dirname;
            } else {
                #{data} = "";
            }
        }

        return File(String(data))
    }

    public async getCanonicalFile() -> File {
        return File(getCanonicalPath())
    }

    public getCanonicalFileSync() -> File {
        return File(getCanonicalPathSync())
    }

    public async getCanonicalPath() -> String {
        var current = this
        let names = Array<String>()

        while (current) {
            let target = current.isSymbolicLink ?
                current.getSymbolicLinkTarget() :
                current.normalizedLocation

            if (!normalizedLocation.startsWith(target)) {
                return normalizeLocation(target + "/" + names.join("/"))
            }

            names.unshift(current.name)
            current = current.getParent()
        }

        return normalizedLocation
    }

    public getCanonicalPathSync() -> String {
        var current = this
        let names = Array<String>()

        while (current) {
            let target = current.isSymbolicLink ?
                current.getSymbolicLinkTargetSync() :
                current.normalizedLocation

            if (!normalizedLocation.startsWith(target)) {
                return normalizeLocation(target + "/" + names.join("/"))
            }

            names.unshift(current.name)
            current = current.getParent()
        }

        return normalizedLocation
    }

    public async getSymbolicLinkTarget() -> String {
        native_array native var Char[] data

        external {
            #{data} = await new Promise((resolve, reject) => {
                #{FileGlobal.fs}.readlink(#{location.chars.data}, (err, target) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(target);
                    }
                });
            });
        }

        return normalizeLocation(String(data))
    }

    public getSymbolicLinkTargetSync() -> String {
        native_array native var Char[] data

        external {
            #{data} = #{FileGlobal.fs}.readlinkSync(#{location.chars.data});
        }

        return normalizeLocation(String(data))
    }

    public getParent() -> File => null {
        native_array native var Char[] data

        external {
            #{data} = #{FileGlobal.path}.resolve(#{location.chars.data}, '..');
        }

        let parentLocation = String(data)

        if (parentLocation != location) {
            return File(parentLocation)
        }
    }

    public getChild(String location) => File(this.location + "/" + location)

    public async delete(
        Bool: recursive = false,
        Bool: force = false
    ) => true {
        if (!exists) {
            return false
        }

        native_array native var Char[] errorMessage

        external {
            #{errorMessage} = await new Promise(resolve => {
                #{FileGlobal.fs}.rm(#{location.chars.data}, {
                    recursive: #{recursive},
                    force: #{force}
                }, (err) => {
                    if (err) {
                        resolve(err.message);
                    } else {
                        resolve(null);
                    }
                });
            });

            if (#{errorMessage}) {
                #{throw Exception(String(errorMessage))};
            }
        }
    }

    public deleteSync(
        Bool: recursive = false,
        Bool: force = false
    ) => true {
        if (!exists) {
            return false
        }

        native_array native var Char[] errorMessage

        external {
            #{errorMessage} = #{FileGlobal.fs}.rmSync(#{location.chars.data}, {
                recursive: #{recursive},
                force: #{force}
            }, (err) => {
                if (err) {
                    resolve(err.message);
                } else {
                    resolve(null);
                }
            });

            if (#{errorMessage}) {
                #{throw Exception(String(errorMessage))};
            }
        }
    }

    public async mkdirs() => mkdir(true)

    public async mkdir(Bool recursive = false, Bool: failOnExistsAlready = false) => true {
        external {
            if (failOnExistsAlready || !#{exists}) {
                await #{FileGlobal.fs}.promises.mkdir(#{location.chars.data}, {recursive: #{recursive}});
            }
        }
    }

    public async copy(File destination) => true {
        if (isDirectory) {
            if (!destination.isDirectory) {
                destination.mkdir()
            }

            let files = getChildFiles(
                recursive: false,
                includeHidden: true,
                includeDirectories: true
            )

            for (file in files) {
                file.copy(File(destination, file.name))
            }
        } else {
            external {
                await #{FileGlobal.fs}.promises.copyFile(#{location.chars.data}, #{destination.location.chars.data});
            }
        }
    }

    public async chmod(String mode) => true {
        external {
            await #{FileGlobal.fs}.promises.chmod(#{location.chars.data}, #{mode.chars.data});
        }
    }

    public async symbolicLinkTo(File target) => true {
        external {
            await new Promise((resolve, reject) => {
                #{FileGlobal.fs}.symlink(#{target.location.chars.data}, #{location.chars.data}, 'junction', (err) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve();
                    }
                });
            });
        }
    }

    public static async symbolicLink(File from, File to) => from.symbolicLinkTo(to)

    public createReadStream(String encoding = "utf8") -> EventStream {
        let stream = EventStream(true)

        native_array native var Char[] data

        external {
            const readableStream = #{FileGlobal.fs}.createReadStream(
                #{location.chars.data},
                {
                    encoding: #{encoding.chars.data}
                }
            );

            readableStream.on('error', (error) => {
                if (typeof error === 'string') {
                    #{data} = error;
                } else {
                    #{data} = error + "";
                }

                #{stream.emit("error", String(data))$};
            });

            readableStream.on('data', (chunk) => {
                #{data} = chunk;

                #{stream.emit("data", String(data))$};
            });

            readableStream.on('close', () => {
                #{stream.emit("close")$};
            });
        }

        return stream
    }

    public static class FileGlobal {
        public static native Object fs
        public static native Object path

        async static {
            fs = import("fs")
            path = import("path")
        }
    }
}
