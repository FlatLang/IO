package "flatlang/io"

import "flatlang/time/Time"

class File {
    let visible static File EXECUTED_FILE = getExecutedFile()
    let visible static File EXECUTED_DIRECTORY = getExecutedDirectory()

    visible Bool isDirectory {
        get {
            if (!exists) {
                return false
            }

            external {
                if (#{FileGlobal.fs}.lstatSync(#{location.chars.data}).isDirectory()) {
                    return true;
                }
            }

            return false
        }
    }

    visible Bool isSymbolicLink {
        get {
            if (!exists) {
                return false
            }

            external {
                if (#{FileGlobal.fs}.lstatSync(#{location.chars.data}).isSymbolicLink()) {
                    return true;
                }
            }

            return false
        }
    }

    visible Bool exists {
        get {
            external {
                if (#{FileGlobal.fs}.existsSync(#{location.chars.data})) {
                    return true;
                }
            }

            return false
        }
    }

    visible impure File[] files {
        get {
            if (!isDirectory) {
                throw new Exception("Must be a directory to list files")
            }

            var list = new File[]
            native Char[] filename

            external {
                #{FileGlobal.fs}.readdirSync(#{location.chars.data}).forEach((f) => {
                    #{filename} = f;
                    #{list.add(new File("#{location}/#{new String(filename)}"))};
                });
            }

            return list
        }
    }

    public construct(visible String location) {
        normalizedLocation = location.replace("\\", "/")
    }

    static getExecutedFile() -> File => null {
        native var Char[] data

        external {
            #{data} = __filename;
        }

        return new File(new String(data))
    }

    static getExecutedDirectory() -> File => null {
        native var Char[] data

        external {
            #{data} = __dirname;
        }

        return new File(new String(data))
    }

    public getParent() -> File => null {
        native var Char[] data

        external {
            #{data} = #{FileGlobal.path}.resolve(#{location.chars.data}, '..');
        }

        return new File(new String(data))
    }

    public getChild(String location) => new File(this.location + "/" + location)

    public async delete(
        Bool: recursive = false,
        Bool: force = false
    ) => true {
        native var Char[] errorMessage

        external {
            #{errorMessage} = await new Promise(resolve => {
                #{FileGlobal.fs}.rm(#{location.chars.data}, {
                    recursive: #{recursive},
                    force: #{force}
                }, (err) => {
                    if (err) {
                        resolve(err.message);
                    } else {
                        resolve(null);
                    }
                });
            });

            if (#{errorMessage}) {
                #{throw new Exception(new String(errorMessage))};
            }
        }
    }

    public async mkdirs() => true {
        external {
            await #{FileGlobal.fs}.promises.mkdir(#{location.chars.data}, {recursive: true})
        }
    }

    public async symbolicLinkTo(File target) => true {
        external {
            await new Promise((resolve, reject) => {
                #{FileGlobal.fs}.symlink(#{target.location.chars.data}, #{location.chars.data}, 'junction', (err) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve();
                    }
                });
            });
        }
    }

    public static async symbolicLink(File from, File to) => from.symbolicLinkTo(to)

    public static class FileGlobal {
        external type FsType
        private static var FsType _fs
        visible static FsType fs {
            get {
                external {
                    if (!#{_fs}) {
                        #{_fs} = require('fs');
                    }
                }

                return _fs
            }
        }

        external type PathType
        private static var PathType _path
        visible static PathType path {
            get {
                external {
                    if (!#{_path}) {
                        #{_path} = require('path');
                    }
                }

                return _path
            }
        }
    }
}
