package "flatlang/io"

import "flatlang/io/NativeFile.h"
import "flatlang/time/Time"
import "tinydir.h"

class File {
    external int getMaxOpenFiles() as extGetMaxOpenFiles
    external void setMaxOpenFiles(int max) as extSetMaxOpenFiles
    external int access(char[] location, int property)

    external int F_OK

    external type tinydir_file

    tinydir_file* file

    visible Bool exists => access(location.chars.data, F_OK) != -1

    visible Bool isDirectory {
        get {
            external {
                return #{file}->is_dir;
            }
        }

        no set
    }

    visible impure File[] files {
        get {
            if (!isDirectory) {
                throw new Exception("Must be a directory to list files")
            }

            var list = new File[]

            [Native]
            Char[] current
            tinydir_file* f

            external {
                tinydir_dir dir;
                tinydir_open(&dir, (char*)#{location.chars.data});

                while (dir.has_next) {
                    #{f} = NOVA_MALLOC(sizeof(tinydir_file));
                    tinydir_readfile(&dir, #{f});

                    //if (!file.is_dir) {
                        #{current} = #{f}->name;

                        #{
                            list.add(new File(location + "/" + new String(current), f))
                        }
                    //}

                    tinydir_next(&dir);
                }

                tinydir_close(&dir);
            }

            return list
        }
    }

    construct(visible String location, private tinydir_file* file) {}

    public construct(visible String location) {
        external c {
            errno = 0;

            #{file} = NOVA_MALLOC(sizeof(tinydir_file));

            tinydir_file_open(#{file}, (char*)#{location.chars.data});
        }
    }

    public directoryContents(String location) -> String[] {
        external {
            tinydir_dir dir;
            tinydir_open(&dir, (char*)#{location.chars.data});

            while (dir.has_next) {
                tinydir_file file;
                tinydir_readfile(&dir, &file);

                printf("%s", file.name);

                if (file.is_dir) {
                    printf("/");
                }

                printf("\n");

                tinydir_next(&dir);
            }

            tinydir_close(&dir);
        }

        return null
    }

    public listFiles(String location) -> String[] {
        var names = new String[]

        [Native]
        Char[] current

        external {
            tinydir_dir dir;
            tinydir_open(&dir, (char*)#{location.chars.data});

            while (dir.has_next) {
                tinydir_file file;
                tinydir_readfile(&dir, &file);

                if (!file.is_dir) {
                    #{current} = file.name;
                    #{
                        names.add(new String(current))
                    }
                }

                tinydir_next(&dir);
            }

            tinydir_close(&dir);
        }

        return names
    }

    public Int maxOpenFiles => extGetMaxOpenFiles() {
        set {
            Short min = (Short)20
            Short max = (Short)2048

            if (value > max || value < min) {
                throw new Exception("Invalid max number of open files: #value\nValid values include #{min}-#{max}")
            } else {
                extSetMaxOpenFiles(value)
            }
        }
    }
}